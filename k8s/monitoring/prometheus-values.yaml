# kube-prometheus-stack用のHelmチャート値設定
# kind環境向けの最小構成

# 基本設定
nameOverride: "monitoring"
fullnameOverride: "monitoring"

# Prometheusサーバー設定
prometheus:
  prometheusSpec:
    # リソース設定（最小構成）
    resources:
      requests:
        memory: "256Mi"  # 最小限のメモリ要求
        cpu: "50m"       # 最小限のCPU要求
      limits:
        memory: "512Mi"  # 制限付きメモリ
        cpu: "100m"      # 制限付きCPU
    # データ保持期間（短縮）
    retention: "1d"      # 1日間のデータ保持に短縮
    # 永続ボリューム設定
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "nfs-storage"
          accessModes: ["ReadWriteMany"]
          resources:
            requests:
              storage: "1Gi"  # ストレージサイズを縮小
    # ServiceMonitor設定
    serviceMonitorSelector:
      matchLabels:
        release: monitoring
    # PodMonitor設定
    podMonitorSelector:
      matchLabels:
        release: monitoring
    # 設定ルール
    ruleSelector:
      matchLabels:
        release: monitoring
    # ヘルスチェック待機時間の延長
    readinessProbeInitialDelay: 30  # 短縮
    livenessProbeInitialDelay: 60   # 短縮
    # スタートアッププローブ設定
    startupProbe:
      failureThreshold: 60     # 回数を減らす
      periodSeconds: 10        # 間隔を延長
      timeoutSeconds: 5
    # 機能制限と最適化
    logLevel: error           # エラーのみログに記録
    scrapeInterval: "120s"    # スクレイプ間隔を延長
    evaluationInterval: "120s" # 評価間隔を延長
    enableAdminAPI: false     # 管理APIを無効化
    walCompression: true      # WALの圧縮を有効化
    # Prometheusルールの最適化
    rules:
      alert:
        forGracePeriod: "5m"  # アラート猶予期間

# Grafana設定
grafana:
  adminPassword: "admin"
  resources:
    requests:
      memory: "128Mi"  # 最小限のメモリ要求
      cpu: "50m"       # 最小限のCPU要求
    limits:
      memory: "256Mi"  # 制限付きメモリ
      cpu: "100m"      # 制限付きCPU
  # ヘルスチェック設定
  readinessProbe:
    initialDelaySeconds: 30  # 短縮
  livenessProbe:
    initialDelaySeconds: 60  # 短縮
  persistence:
    enabled: true
    storageClassName: "nfs-storage"
    size: "500Mi"  # ストレージサイズを縮小
    accessModes: ["ReadWriteMany"]
  service:
    type: ClusterIP
  # 機能制限
  env:
    GF_FEATURE_TOGGLES_ENABLE: "tempUserDeletion" # 最小限の機能だけ有効化
    GF_SERVER_DOMAIN: "monitoring.localhost"
    GF_USERS_ALLOW_SIGN_UP: "false"
    GF_AUTH_ANONYMOUS_ENABLED: "true" # 認証を簡略化
    GF_DASHBOARDS_MIN_REFRESH_INTERVAL: "1m" # リフレッシュ間隔を延長
  ingress:
    enabled: true
    hosts:
      - "monitoring.localhost"
    path: "/"
  # デフォルトダッシュボード設定
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  # デフォルトのデータソース設定
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://monitoring-prometheus:9090
          access: proxy
          isDefault: true

# AlertManager設定
alertmanager:
  alertmanagerSpec:
    resources:
      requests:
        memory: "32Mi"   # 最小限のメモリ要求
        cpu: "20m"       # 最小限のCPU要求
      limits:
        memory: "64Mi"   # 制限付きメモリ
        cpu: "50m"       # 制限付きCPU
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "nfs-storage"
          accessModes: ["ReadWriteMany"]
          resources:
            requests:
              storage: "500Mi"  # ストレージサイズを縮小
    # シンプルな構成
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['alertname']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'null'
      receivers:
        - name: 'null'

# ノードエクスポーター設定
nodeExporter:
  enabled: true
  resources:
    requests:
      memory: "32Mi"  # 最小限のメモリ要求
      cpu: "20m"      # 最小限のCPU要求
    limits:
      memory: "64Mi"  # 制限付きメモリ
      cpu: "50m"      # 制限付きCPU

# kubeletメトリクス設定
kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # 不要なメトリクスを除外
      - action: drop
        regex: kubelet_runtime_operations_latency_microseconds
        sourceLabels: [__name__]
      - action: drop
        regex: container_(network_tcp_usage_total|network_udp_usage_total|tasks_state|cpu_load_average_10s)
        sourceLabels: [__name__]

# kubeStateMetrics設定
kubeStateMetrics:
  enabled: true

# prometheusOperator設定
prometheusOperator:
  resources:
    requests:
      memory: "64Mi"  # 最小限のメモリ要求
      cpu: "25m"      # 最小限のCPU要求
    limits:
      memory: "128Mi" # 制限付きメモリ
      cpu: "50m"      # 制限付きCPU
  # 最適化設定
  kubeletService:
    enabled: false  # kubeletサービスを無効化（リソース節約）
  admissionWebhooks:
    enabled: false  # Webhookを無効化
  tls:
    enabled: false  # TLSを無効化 