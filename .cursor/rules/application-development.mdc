---
description: 
globs: 
alwaysApply: true
---

# プロジェクト規則
このガイドは、モダンなウェブ技術を使用した開発におけるベストプラクティス、慣例、標準を示しています。

**常にこれらのガイドラインに従ってください**

## 環境
- bun を使用する
- 単体テストには bun test を使用する

## 開発の理念
- クリーンでメンテナンスしやすく、拡張性のあるコードを書く
- SOLID の原則に従う
- 命令型よりも関数型・宣言型プログラミングパターンを優先する
- 型安全性と静的解析を重視する
- コンポーネント駆動開発を実践する

## コード実装のガイドライン
### コードスタイル
- 未使用の変数を削除する
- コールバック内でエラーパラメータを必ず処理する

### 名前付け規則
- PascalCase を使用する:
  - コンポーネント
  - 型定義
  - インターフェース

- kebab-case を使用する:
  -ディレクトリ名 (例: components/auth-wizard)
  -ファイル名 (例: user-profile.tsx)

- camelCase を使用する:
  - 変数
  - 関数
  - メソッド
  - フック
  - プロパティ
  - Props

- Uppercaseを使用する:
  -環境変数
  - 定数
  - グローバル設定

- ブール型変数には動詞を接頭辞として付ける: isLoading, hasError, canSubmit

- 以下を除き、省略形ではなく完全な単語を使用する:
  - err (error)
  - req (request)
  - res (response)
  - props (properties)
  - ref (reference)

### TypeScript の実装
- strict モードを有効にする
- verbatimModuleSyntax に従う
- undefined または null の可能性を安全に処理するために型ガードを使用する
- 適切にジェネリクスを使用する
- unknown 型を適切に使用する
- TypeScript ユーティリティ型 (Partial, Pick, Omit) を活用して、よりクリーンで再利用可能なコードを書く
- 既存の型の変種を動的に作成するためにマップ型を使用する
- TypeScript 特有の構文 (例: enum) を使用しない

### ES モジュール
- Node.js API をインポートする際は、node: プレフィックスを使用する (例: "node:fs")

### 単体テスト
- 単体テストはテスト対象のファイルと同じディレクトリに配置する (例: foo.ts の場合は foo.test.ts)
- 各関数やコンポーネントを検証するために、十分に網羅的な単体テストを書く
- Arrange-Act-Assert のパターンに従い、テストの明確性と一貫性を確保する
- 単体テストを孤立させるために、外部依存関係や API 呼び出しをモックする

## ドキュメンテーション
- TSDoc を適切に日本語で記述する
- 全ての公開関数、クラス、メソッド、インターフェースを文書化する
- 適切なコメントを日本語で残す
- 必要に応じて例を追加する
- 適切な句読点を使い、完全な文章を書く
- 説明を明確で簡潔に保つ
- 適切な Markdown フォーマットを使用する
- 適切なコードブロックを使用する
- 適切なリンクを使用する
- 適切な見出しを使用する
- 適切なリストを使用する