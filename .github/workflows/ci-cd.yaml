name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 手動実行用

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # キャッシュを使用してビルド高速化
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # テスト実行（必要に応じて）
      - name: Run tests
        run: echo "Running tests..." # ここに実際のテストコマンドを記述

      # ブランチ名からデプロイ環境を決定
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      # Docker認証（GitHub Container Registry）
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # イメージタグ設定
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest

      # イメージビルドとプッシュ
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # キャッシュの修正（GitHub Actionsの容量制限対応）
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ needs.build-and-test.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # k8sマニフェストの更新
      - name: Update kube config
        run: |
          # 環境に応じたマニフェスト更新
          if [[ "${{ needs.build-and-test.outputs.environment }}" == "production" ]]; then
            IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
            sed -i "s|image: nginx:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG|g" k8s/base-deployment.yaml
          else
            IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
            sed -i "s|image: nginx:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG|g" k8s/base-deployment.yaml
          fi

      # kubeconfig設定（実際の環境に合わせて調整）
      - name: Configure kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
      # アプリケーションデプロイ
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/base-deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl rollout status deployment/gbc-app 